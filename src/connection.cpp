#include "connection.hpp"
#include "cas.hpp"
#include "instance.hpp"
#include "jstocbpp.hpp"
#include "mutationtoken.hpp"
#include "transcoder.hpp"
#include <couchbase/operations/management/freeform.hxx>
#include <type_traits>

namespace couchnode
{

void jscbForward(Napi::Env env, Napi::Function callback, std::nullptr_t *,
                 FwdFunc *fn)
{
    if (env == nullptr || callback == nullptr) {
        delete fn;
        return;
    }

    try {
        (*fn)(env, callback);
    } catch (const Napi::Error &e) {
    }
    delete fn;
}

void Connection::Init(Napi::Env env, Napi::Object exports)
{
    Napi::Function func = DefineClass(
        env, "Connection",
        {
            InstanceMethod<&Connection::jsConnect>("connect"),
            InstanceMethod<&Connection::jsShutdown>("shutdown"),
            InstanceMethod<&Connection::jsOpenBucket>("openBucket"),
            InstanceMethod<&Connection::jsDiagnostics>("diagnostics"),
            InstanceMethod<&Connection::jsPing>("ping"),

            //#region Autogenerated Method Registration

            InstanceMethod<&Connection::jsPrepend>("prepend"),
            InstanceMethod<&Connection::jsExists>("exists"),
            InstanceMethod<&Connection::jsHttpNoop>("httpNoop"),
            InstanceMethod<&Connection::jsUnlock>("unlock"),
            InstanceMethod<&Connection::jsUpsert>("upsert"),
            InstanceMethod<&Connection::jsAppend>("append"),
            InstanceMethod<&Connection::jsQuery>("query"),
            InstanceMethod<&Connection::jsReplace>("replace"),
            InstanceMethod<&Connection::jsGetAndTouch>("getAndTouch"),
            InstanceMethod<&Connection::jsRemove>("remove"),
            InstanceMethod<&Connection::jsGet>("get"),
            InstanceMethod<&Connection::jsAnalytics>("analytics"),
            InstanceMethod<&Connection::jsGetProjected>("getProjected"),
            InstanceMethod<&Connection::jsDecrement>("decrement"),
            InstanceMethod<&Connection::jsSearch>("search"),
            InstanceMethod<&Connection::jsTouch>("touch"),
            InstanceMethod<&Connection::jsLookupIn>("lookupIn"),
            InstanceMethod<&Connection::jsDocumentView>("documentView"),
            InstanceMethod<&Connection::jsGetAndLock>("getAndLock"),
            InstanceMethod<&Connection::jsInsert>("insert"),
            InstanceMethod<&Connection::jsMutateIn>("mutateIn"),
            InstanceMethod<&Connection::jsIncrement>("increment"),
            InstanceMethod<&Connection::jsManagementGroupUpsert>(
                "managementGroupUpsert"),
            InstanceMethod<&Connection::jsManagementEventingPauseFunction>(
                "managementEventingPauseFunction"),
            InstanceMethod<&Connection::jsManagementQueryIndexGetAll>(
                "managementQueryIndexGetAll"),
            InstanceMethod<&Connection::jsManagementCollectionCreate>(
                "managementCollectionCreate"),
            InstanceMethod<&Connection::jsManagementEventingResumeFunction>(
                "managementEventingResumeFunction"),
            InstanceMethod<&Connection::jsManagementSearchIndexGetStats>(
                "managementSearchIndexGetStats"),
            InstanceMethod<&Connection::jsManagementBucketGetAll>(
                "managementBucketGetAll"),
            InstanceMethod<&Connection::jsManagementQueryIndexBuildDeferred>(
                "managementQueryIndexBuildDeferred"),
            InstanceMethod<&Connection::jsManagementClusterDescribe>(
                "managementClusterDescribe"),
            InstanceMethod<&Connection::jsManagementSearchIndexGetAll>(
                "managementSearchIndexGetAll"),
            InstanceMethod<&Connection::jsManagementSearchIndexAnalyzeDocument>(
                "managementSearchIndexAnalyzeDocument"),
            InstanceMethod<&Connection::jsManagementQueryIndexDrop>(
                "managementQueryIndexDrop"),
            InstanceMethod<&Connection::jsManagementAnalyticsDatasetCreate>(
                "managementAnalyticsDatasetCreate"),
            InstanceMethod<&Connection::jsManagementBucketFlush>(
                "managementBucketFlush"),
            InstanceMethod<&Connection::jsManagementAnalyticsIndexDrop>(
                "managementAnalyticsIndexDrop"),
            InstanceMethod<&Connection::jsManagementQueryIndexCreate>(
                "managementQueryIndexCreate"),
            InstanceMethod<&Connection::jsManagementSearchIndexUpsert>(
                "managementSearchIndexUpsert"),
            InstanceMethod<&Connection::jsManagementAnalyticsDatasetGetAll>(
                "managementAnalyticsDatasetGetAll"),
            InstanceMethod<&Connection::jsManagementAnalyticsIndexGetAll>(
                "managementAnalyticsIndexGetAll"),
            InstanceMethod<
                &Connection::jsManagementAnalyticsGetPendingMutations>(
                "managementAnalyticsGetPendingMutations"),
            InstanceMethod<&Connection::jsManagementAnalyticsDataverseDrop>(
                "managementAnalyticsDataverseDrop"),
            InstanceMethod<&Connection::jsManagementAnalyticsLinkConnect>(
                "managementAnalyticsLinkConnect"),
            InstanceMethod<&Connection::jsManagementCollectionsManifestGet>(
                "managementCollectionsManifestGet"),
            InstanceMethod<
                &Connection::jsManagementClusterDeveloperPreviewEnable>(
                "managementClusterDeveloperPreviewEnable"),
            InstanceMethod<&Connection::jsManagementAnalyticsLinkDrop>(
                "managementAnalyticsLinkDrop"),
            InstanceMethod<&Connection::jsManagementBucketDescribe>(
                "managementBucketDescribe"),
            InstanceMethod<&Connection::jsManagementEventingUpsertFunction>(
                "managementEventingUpsertFunction"),
            InstanceMethod<&Connection::jsManagementViewIndexGetAll>(
                "managementViewIndexGetAll"),
            InstanceMethod<&Connection::jsManagementBucketGet>(
                "managementBucketGet"),
            InstanceMethod<&Connection::jsManagementBucketUpdate>(
                "managementBucketUpdate"),
            InstanceMethod<&Connection::jsManagementBucketDrop>(
                "managementBucketDrop"),
            InstanceMethod<&Connection::jsManagementFreeform>(
                "managementFreeform"),
            InstanceMethod<&Connection::jsManagementScopeDrop>(
                "managementScopeDrop"),
            InstanceMethod<&Connection::jsManagementViewIndexUpsert>(
                "managementViewIndexUpsert"),
            InstanceMethod<&Connection::jsManagementUserGetAll>(
                "managementUserGetAll"),
            InstanceMethod<&Connection::jsManagementScopeCreate>(
                "managementScopeCreate"),
            InstanceMethod<&Connection::jsManagementEventingGetFunction>(
                "managementEventingGetFunction"),
            InstanceMethod<&Connection::jsManagementViewIndexDrop>(
                "managementViewIndexDrop"),
            InstanceMethod<&Connection::jsManagementAnalyticsLinkDisconnect>(
                "managementAnalyticsLinkDisconnect"),
            InstanceMethod<&Connection::jsManagementUserUpsert>(
                "managementUserUpsert"),
            InstanceMethod<&Connection::jsManagementEventingGetStatus>(
                "managementEventingGetStatus"),
            InstanceMethod<&Connection::jsManagementEventingGetAllFunctions>(
                "managementEventingGetAllFunctions"),
            InstanceMethod<&Connection::jsManagementAnalyticsIndexCreate>(
                "managementAnalyticsIndexCreate"),
            InstanceMethod<&Connection::jsManagementScopeGetAll>(
                "managementScopeGetAll"),
            InstanceMethod<&Connection::jsManagementUserGet>(
                "managementUserGet"),
            InstanceMethod<&Connection::jsManagementSearchIndexDrop>(
                "managementSearchIndexDrop"),
            InstanceMethod<
                &Connection::jsManagementSearchIndexControlPlanFreeze>(
                "managementSearchIndexControlPlanFreeze"),
            InstanceMethod<&Connection::jsManagementSearchIndexStats>(
                "managementSearchIndexStats"),
            InstanceMethod<&Connection::jsManagementUserDrop>(
                "managementUserDrop"),
            InstanceMethod<&Connection::jsManagementAnalyticsDataverseCreate>(
                "managementAnalyticsDataverseCreate"),
            InstanceMethod<&Connection::jsManagementSearchIndexControlQuery>(
                "managementSearchIndexControlQuery"),
            InstanceMethod<&Connection::jsManagementRoleGetAll>(
                "managementRoleGetAll"),
            InstanceMethod<&Connection::jsManagementGroupGetAll>(
                "managementGroupGetAll"),
            InstanceMethod<&Connection::jsManagementEventingDropFunction>(
                "managementEventingDropFunction"),
            InstanceMethod<&Connection::jsManagementCollectionDrop>(
                "managementCollectionDrop"),
            InstanceMethod<&Connection::jsManagementSearchIndexControlIngest>(
                "managementSearchIndexControlIngest"),
            InstanceMethod<&Connection::jsManagementEventingDeployFunction>(
                "managementEventingDeployFunction"),
            InstanceMethod<&Connection::jsManagementGroupGet>(
                "managementGroupGet"),
            InstanceMethod<&Connection::jsManagementViewIndexGet>(
                "managementViewIndexGet"),
            InstanceMethod<&Connection::jsManagementBucketCreate>(
                "managementBucketCreate"),
            InstanceMethod<&Connection::jsManagementAnalyticsDatasetDrop>(
                "managementAnalyticsDatasetDrop"),
            InstanceMethod<&Connection::jsManagementGroupDrop>(
                "managementGroupDrop"),
            InstanceMethod<&Connection::jsManagementSearchIndexGet>(
                "managementSearchIndexGet"),
            InstanceMethod<&Connection::jsManagementEventingUndeployFunction>(
                "managementEventingUndeployFunction"),
            InstanceMethod<
                &Connection::jsManagementSearchIndexGetDocumentsCount>(
                "managementSearchIndexGetDocumentsCount"),
            InstanceMethod<&Connection::jsManagementAnalyticsLinkGetAll>(
                "managementAnalyticsLinkGetAll"),

            //#endregion Autogenerated Method Registration
        });

    constructor(env) = Napi::Persistent(func);
    exports.Set("Connection", func);
}

Connection::Connection(const Napi::CallbackInfo &info)
    : Napi::ObjectWrap<Connection>(info)
{
    _instance = new Instance();
}

Connection::~Connection()
{
    _instance->asyncDestroy();
    _instance = nullptr;
}

Napi::Value Connection::jsConnect(const Napi::CallbackInfo &info)
{
    auto connstr = info[0].ToString().Utf8Value();
    auto credentialsJsObj = info[1].As<Napi::Object>();
    auto callbackJsFn = info[2].As<Napi::Function>();

    auto connstrInfo = couchbase::utils::parse_connection_string(connstr);
    auto creds = jsToCbpp<couchbase::cluster_credentials>(credentialsJsObj);

    auto cookie = CallCookie(info.Env(), callbackJsFn, "cbConnectCallback");
    this->_instance->_cluster->open(
        couchbase::origin(creds, connstrInfo),
        [cookie = std::move(cookie)](std::error_code ec) mutable {
            cookie.invoke([ec](Napi::Env env, Napi::Function callback) {
                callback.Call({cbpp_to_js(env, ec)});
            });
        });

    return info.Env().Null();
}

Napi::Value Connection::jsShutdown(const Napi::CallbackInfo &info)
{
    auto callbackJsFn = info[0].As<Napi::Function>();

    auto cookie = CallCookie(info.Env(), callbackJsFn, "cbShutdownCallback");
    this->_instance->_cluster->close([cookie = std::move(cookie)]() mutable {
        cookie.invoke([](Napi::Env env, Napi::Function callback) {
            callback.Call({env.Null()});
        });
    });

    return info.Env().Null();
}

Napi::Value Connection::jsOpenBucket(const Napi::CallbackInfo &info)
{
    auto bucketName = info[0].ToString().Utf8Value();
    auto callbackJsFn = info[1].As<Napi::Function>();

    auto cookie = CallCookie(info.Env(), callbackJsFn, "cbOpenBucketCallback");
    this->_instance->_cluster->open_bucket(
        bucketName, [cookie = std::move(cookie)](std::error_code ec) mutable {
            cookie.invoke([ec](Napi::Env env, Napi::Function callback) {
                callback.Call({cbpp_to_js(env, ec)});
            });
        });

    return info.Env().Null();
}

Napi::Value Connection::jsDiagnostics(const Napi::CallbackInfo &info)
{
    auto optsJsObj = info[0].As<Napi::Object>();
    auto callbackJsFn = info[1].As<Napi::Function>();

    auto reportId =
        jsToCbpp<std::optional<std::string>>(optsJsObj.Get("report_id"));

    auto cookie = CallCookie(info.Env(), callbackJsFn, "diagnostics");
    this->_instance->_cluster->diagnostics(
        reportId, [cookie = std::move(cookie)](
                      couchbase::diag::diagnostics_result resp) mutable {
            cookie.invoke([resp = std::move(resp)](
                              Napi::Env env, Napi::Function callback) mutable {
                Napi::Value jsErr, jsRes;
                try {
                    jsErr = env.Null();
                    jsRes = cbpp_to_js(env, resp);
                } catch (const Napi::Error &e) {
                    jsErr = env.Null();
                    jsRes = env.Null();
                }

                callback.Call({jsErr, jsRes});
            });
        });

    return info.Env().Null();
}

Napi::Value Connection::jsPing(const Napi::CallbackInfo &info)
{
    auto optsJsObj = info[0].As<Napi::Object>();
    auto callbackJsFn = info[1].As<Napi::Function>();

    auto reportId =
        jsToCbpp<std::optional<std::string>>(optsJsObj.Get("report_id"));
    auto bucketName =
        jsToCbpp<std::optional<std::string>>(optsJsObj.Get("bucket_name"));
    auto services =
        jsToCbpp<std::set<couchbase::service_type>>(optsJsObj.Get("services"));

    auto cookie = CallCookie(info.Env(), callbackJsFn, "ping");
    this->_instance->_cluster->ping(
        reportId, bucketName, services,
        [cookie =
             std::move(cookie)](couchbase::diag::ping_result resp) mutable {
            cookie.invoke([resp = std::move(resp)](
                              Napi::Env env, Napi::Function callback) mutable {
                Napi::Value jsErr, jsRes;
                try {
                    jsErr = env.Null();
                    jsRes = cbpp_to_js(env, resp);
                } catch (const Napi::Error &e) {
                    jsErr = env.Null();
                    jsRes = env.Null();
                }

                callback.Call({jsErr, jsRes});
            });
        });

    return info.Env().Null();
}

} // namespace couchnode
